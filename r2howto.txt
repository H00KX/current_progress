
General guides to getting started with R2 
	https://www.radare.org/get/THC2018.pdf
	https://blog.dutchcoders.io/getting-started-with-radare2/
	https://asciinema.org/~Maijin?page=2
	https://blog.xdmtk.org/index.php/2018/05/30/basic-reverse-engineering-with-radare2-part-ii/
	https://www.megabeets.net/a-journey-into-radare-2-part-1/


Making changes to ~/.radare2rc to configure Radare2
	https://radare.gitbooks.io/radare2book/configuration/intro.html
	https://gist.github.com/williballenthin/6857590dab3e2a6559d7
	https://github.com/radare/radare2/issues/10748
	https://r2wiki.readthedocs.io/en/latest/home/tips/
	https://github.com/radare/radare2/blob/master/doc/fortunes.tips

#When commenting out a line in ~/.radare2rc , dont do #foo . Use # foo . That space is important
#Change your fortune type
e cfg.fortunes.type = nsfw
#Disassemble in intel syntax
e asm.syntax = intel
# Use UTF-8 to show cool arrows that do not look like crap :)
e scr.utf8 = true
# Show comments at right of disassembly if they fit in screen 
e asm.cmt.right=true
#Shows pseudocode in disassembly. Eg mov eax, str.ok = > eax = str.ok
#e asm.pseudo = true
#inline description of that each line does.
e asm.describe = true
#Solarized theme
eco solarized
#enable command autocompletion
e cfg.newtab = 1
                                                                                                       ~                                                                                                       


Preliminary work
	rabin2 -I --- extracting information from binary files
	find strings
		iz
		

	continue the execution process until main is reached. 
		[0xf7797b30]> dcu main

Begining Steps
	ood -- to reopen binary in debug mode to write and modify 
	afl -- to see functions in program 
	s @ (address of function) + pdf 

 	afvn [new_name] ([old_name])  rename argument/local -- neccisary to seek to function where you are changing local variable
	


Visual Graph Mode
	https://gist.github.com/williballenthin/6857590dab3e2a6559d7
	http://radare.today/posts/awesome-ascii-graphs/
	https://www.linuxdays.cz/2017/video/Tomas_Antecky-Disassembling_with_radare2.pdf
	Graph a specific function 
	 ex. VV @ sym.do_magic
	
	Understanding Graph
		-t/f follows conditional jump
		-tab/TAB cycles between nodes	
		-y/Y folds current node	




Highlighted features of R2 for the purpose of Reversing and Binary Exploitation 

	Search for string in binary using r2
		https://radare.gitbooks.io/radare2book/search_bytes/basic_searches.html


Mapping Files
https://radare.gitbooks.io/radare2book/basic_commands/mapping_files.html
https://docs.microsoft.com/en-us/windows/desktop/memory/file-mapping
	Purpose
		Maps will put a specific region of an fd in virtual addressing
		mapping the file is required for manipulating a loaded binary file 

	Examples 
		Command to map file blah in R2 
		:>oo+
		:> o
		3 * rwx 0x00002450 blah

		0x0040070a]> wa mov dword [rbp-0x4], 0xdfa8fc77
		Failed to write  -----
		[0x0040070a]> oo+
		[0x0040070a]> wa mov dword [rbp-0x4], 0xdfa8fc77
		Written 7 byte(s) (mov dword [rbp-0x4], 0xdfa8fc77) = wx c745fc77fca8df
		[0x0040070a]> 


Seeking
https://radare.gitbooks.io/radare2book/basic_commands/seeking.html
	Purpose 
		Seek to a different place by changing the current offset-- used in conjunction with pd
	
	Examples 
		Print current address:
			s
		Seek to an address:
			 s 0x0040070a

Print Modes
https://radare.gitbooks.io/radare2book/basic_commands/print_modes.html
	Purpose 
		Display and interpret information
		Print information that was seeked 
	Examples
		pd[?] [sz] [a] [b]       disassemble N opcodes (pd) or N bytes (pD)
				

Writing Data
https://radare.gitbooks.io/radare2book/basic_commands/write.html
https://radare.gitbooks.io/radare2book/basic_commands/write.html
    Purpose

    Steps prior to writing data
        Neccisary to map the file first
	((slight confusion on when to map binary file or run radar2 in debug mode, either r2 -d or ood))
	https://github.com/radare/radare2/issues/5865

    Examples:
        Using wa operation: write opcode, separated by ';' 
		Writing the opcode mov from the current offset and moving a memory address into a variable
	            wa mov dword [rbp-0x4], 0xdfa8fc77
	
	
	
        	Overwriting bigger value with smaller value in mov operation
		https://github.com/PlatyPew/picoctf-2018-writeup/tree/master/Reversing/be-quick-or-be-dead-2
			0x0040074f      bff7030000     mov edi, 0x3f7 

			wa mov edi, 5 @ 0x0040074f
			Written 5 byte(s) (mov edi, 5) = wx bf05000000
		
			0x0040074f      bf05000000     mov edi, 5   		

	Using wx operation: write two intel nops (from wxfile or wxseek)	
	        Overwriting opcode to create nop sled
        	    	https://github.com/PlatyPew/picoctf-2018-writeup/tree/master/Reversing/be-quick-or-be-dead-2
            		write two intel nops
                	wx 9090909090 @ 0x0040087d
			Neccisary to check if invalid opcodes are not present in nopsled 



Registers: get and set the values of those registers 
https://radare.gitbooks.io/radare2book/debugger/registers.html
	Using dr operation: Print value and manipulate value of registers
	Examples 
		Moving RIP to a different address to modify flow of program 
			dr rip=0x0040075a

		Changing the value of a register 
			storing hex value into eax
				dr eax=0x2e8e4d99
			
					



Managing Variables 
https://radare.gitbooks.io/radare2book/analysis/variables.html
	Purpose 
		-See whats stored in local variables 
		-







